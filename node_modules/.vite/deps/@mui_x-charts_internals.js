import {
  CartesianContext,
  CartesianContextProvider,
  ChartsAxesGradients,
  ColorContext,
  ColorProvider,
  DEFAULT_X_AXIS_KEY,
  DEFAULT_Y_AXIS_KEY,
  DrawingContext,
  DrawingProvider,
  InteractionContext,
  InteractionProvider,
  ResizableContainer,
  SeriesContext,
  SeriesContextProvider,
  SvgContext,
  ZAxisContext,
  ZAxisContextProvider,
  _extends,
  cartesianProviderUtils,
  cartesianSeriesTypes,
  defaultizeValueFormatter,
  getLabel,
  getSVGPoint,
  init_extends,
  isBandScaleConfig,
  isPointScaleConfig,
  useCartesianContext,
  useChartContainerDimensions,
  useChartContainerHooks,
  useChartGradient,
  useDrawingArea,
  useId,
  useInteractionItemProps,
  useLineChartProps,
  useReducedMotion,
  useSeries
} from "./chunk-GNXCPN3P.js";
import "./chunk-VEB3A3D5.js";
import "./chunk-PN57GLN3.js";
import "./chunk-NRBATONI.js";
import "./chunk-6VWAHX6D.js";
import "./chunk-QJTFJ6OV.js";
import "./chunk-V4OQ3NZ2.js";

// node_modules/@mui/x-charts/esm/ScatterChart/useScatterChartProps.js
init_extends();
var useScatterChartProps = (props) => {
  const {
    xAxis,
    yAxis,
    zAxis,
    series,
    tooltip,
    axisHighlight,
    voronoiMaxRadius,
    disableVoronoi,
    legend,
    width,
    height,
    margin,
    colors,
    sx,
    grid,
    topAxis,
    leftAxis,
    rightAxis,
    bottomAxis,
    onItemClick,
    children,
    slots,
    slotProps,
    loading,
    highlightedItem,
    onHighlightChange
  } = props;
  const chartContainerProps = {
    series: series.map((s) => _extends({
      type: "scatter"
    }, s)),
    width,
    height,
    margin,
    colors,
    xAxis,
    yAxis,
    sx,
    highlightedItem,
    onHighlightChange
  };
  const zAxisProps = {
    zAxis
  };
  const voronoiHandlerProps = {
    voronoiMaxRadius,
    onItemClick
  };
  const chartsAxisProps = {
    topAxis,
    leftAxis,
    rightAxis,
    bottomAxis,
    slots,
    slotProps
  };
  const gridProps = {
    vertical: grid == null ? void 0 : grid.vertical,
    horizontal: grid == null ? void 0 : grid.horizontal
  };
  const scatterPlotProps = {
    onItemClick: disableVoronoi ? onItemClick : void 0,
    slots,
    slotProps
  };
  const overlayProps = {
    loading,
    slots,
    slotProps
  };
  const legendProps = _extends({}, legend, {
    slots,
    slotProps
  });
  const axisHighlightProps = _extends({
    y: "none",
    x: "none"
  }, axisHighlight);
  const tooltipProps = _extends({
    trigger: "item"
  }, tooltip, {
    slots,
    slotProps
  });
  return {
    chartContainerProps,
    zAxisProps,
    voronoiHandlerProps,
    chartsAxisProps,
    gridProps,
    scatterPlotProps,
    overlayProps,
    legendProps,
    axisHighlightProps,
    tooltipProps,
    children
  };
};

// node_modules/@mui/x-charts/esm/BarChart/useBarChartProps.js
init_extends();
var useBarChartProps = (props) => {
  const {
    xAxis,
    yAxis,
    series,
    width,
    height,
    margin,
    colors,
    dataset,
    sx,
    tooltip,
    onAxisClick,
    axisHighlight,
    legend,
    grid,
    topAxis,
    leftAxis,
    rightAxis,
    bottomAxis,
    children,
    slots,
    slotProps,
    skipAnimation,
    loading,
    layout,
    onItemClick,
    highlightedItem,
    onHighlightChange,
    borderRadius,
    barLabel
  } = props;
  const id = useId();
  const clipPathId = `${id}-clip-path`;
  const hasHorizontalSeries = layout === "horizontal" || layout === void 0 && series.some((item) => item.layout === "horizontal");
  const defaultAxisConfig = {
    scaleType: "band",
    data: Array.from({
      length: Math.max(...series.map((s) => (s.data ?? dataset ?? []).length))
    }, (_, index) => index)
  };
  const chartContainerProps = {
    series: series.map((s) => _extends({
      type: "bar"
    }, s, {
      layout: hasHorizontalSeries ? "horizontal" : "vertical"
    })),
    width,
    height,
    margin,
    colors,
    dataset,
    xAxis: xAxis ?? (hasHorizontalSeries ? void 0 : [_extends({
      id: DEFAULT_X_AXIS_KEY
    }, defaultAxisConfig)]),
    yAxis: yAxis ?? (hasHorizontalSeries ? [_extends({
      id: DEFAULT_Y_AXIS_KEY
    }, defaultAxisConfig)] : void 0),
    sx,
    highlightedItem,
    onHighlightChange,
    disableAxisListener: (tooltip == null ? void 0 : tooltip.trigger) !== "axis" && (axisHighlight == null ? void 0 : axisHighlight.x) === "none" && (axisHighlight == null ? void 0 : axisHighlight.y) === "none" && !onAxisClick
  };
  const barPlotProps = {
    onItemClick,
    slots,
    slotProps,
    skipAnimation,
    borderRadius,
    barLabel
  };
  const axisClickHandlerProps = {
    onAxisClick
  };
  const gridProps = {
    vertical: grid == null ? void 0 : grid.vertical,
    horizontal: grid == null ? void 0 : grid.horizontal
  };
  const clipPathGroupProps = {
    clipPath: `url(#${clipPathId})`
  };
  const clipPathProps = {
    id: clipPathId
  };
  const overlayProps = {
    slots,
    slotProps,
    loading
  };
  const chartsAxisProps = {
    topAxis,
    leftAxis,
    rightAxis,
    bottomAxis,
    slots,
    slotProps
  };
  const axisHighlightProps = _extends({}, hasHorizontalSeries ? {
    y: "band"
  } : {
    x: "band"
  }, axisHighlight);
  const legendProps = _extends({}, legend, {
    slots,
    slotProps
  });
  const tooltipProps = _extends({}, tooltip, {
    slots,
    slotProps
  });
  return {
    chartContainerProps,
    barPlotProps,
    axisClickHandlerProps,
    gridProps,
    clipPathProps,
    clipPathGroupProps,
    overlayProps,
    chartsAxisProps,
    axisHighlightProps,
    legendProps,
    tooltipProps,
    children
  };
};
export {
  CartesianContext,
  CartesianContextProvider,
  ChartsAxesGradients,
  ColorContext,
  ColorProvider,
  DrawingContext,
  DrawingProvider,
  InteractionContext,
  InteractionProvider,
  ResizableContainer,
  SeriesContext,
  SeriesContextProvider,
  SvgContext,
  ZAxisContext,
  ZAxisContextProvider,
  cartesianProviderUtils,
  cartesianSeriesTypes,
  defaultizeValueFormatter,
  getLabel,
  getSVGPoint,
  isBandScaleConfig,
  isPointScaleConfig,
  useBarChartProps,
  useCartesianContext,
  useChartContainerDimensions,
  useChartContainerHooks,
  useChartGradient,
  useDrawingArea,
  useInteractionItemProps,
  useLineChartProps,
  useReducedMotion,
  useScatterChartProps,
  useSeries
};
//# sourceMappingURL=@mui_x-charts_internals.js.map
